name: Build & Deploy Emojar

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: emojar-frontend
      APP_DIR: /var/www/emojar
      NODE_VERSION: 20
      APP_PORT: "3006"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build (Next.js)
        run: npm run build

      # ——— NO standalone verification ———

      - name: Package deploy bundle (non-standalone)
        run: |
          set -euo pipefail

          mkdir -p deploy
          # ship the built output and essentials needed at runtime
          cp -r .next deploy/.next
          if [ -d public ]; then cp -r public deploy/public; fi
          [ -f package.json ] && cp package.json deploy/package.json
          [ -f package-lock.json ] && cp package-lock.json deploy/package-lock.json
          [ -f next.config.mjs ] && cp next.config.mjs deploy/next.config.mjs
          [ -f next.config.js ] && cp next.config.js deploy/next.config.js
          [ -f tsconfig.json ] && cp tsconfig.json deploy/tsconfig.json
          [ -f jsconfig.json ] && cp jsconfig.json deploy/jsconfig.json

          # PM2 entry script to run next start
          cat > deploy/start.sh <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          cd "$(dirname "$0")"
          PORT=${PORT:-3006}
          npm run start -- -p "$PORT"
          EOS
          chmod +x deploy/start.sh

          tar -czf emojar.tar.gz -C deploy .

      - name: Upload artifact to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "emojar.tar.gz"
          target: "/tmp"

      - name: Deploy on EC2 (untar & restart PM2)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            set -euo pipefail

            # Make Node & PM2 available for non-interactive shell (NVM install)
            export PATH=$PATH:/home/ubuntu/.nvm/versions/node/v20.19.5/bin

            APP_NAME="${APP_NAME:-emojar-frontend}"
            APP_DIR="${APP_DIR:-/var/www/emojar}"
            APP_PORT="${APP_PORT:-3006}"
            START_FILE="$APP_DIR/current/start.sh"

            # Prepare & unpack
            sudo mkdir -p "$APP_DIR"
            sudo chown -R "$USER:$USER" "$APP_DIR"
            rm -rf "$APP_DIR/current"
            mkdir -p "$APP_DIR/current"
            tar -xzf /tmp/emojar.tar.gz -C "$APP_DIR/current"

            # Install runtime deps on the server (prod only)
            cd "$APP_DIR/current"
            npm ci --omit=dev

            # Start/restart with robust PM2 existence check
            export PORT="$APP_PORT"
            if pm2 jlist | grep -q "\"name\":\"$APP_NAME\""; then
              pm2 restart "$APP_NAME" --update-env --time
            else
              pm2 start "$START_FILE" --name "$APP_NAME" --time
            fi

            pm2 save
            echo "Deployed $APP_NAME to $APP_DIR (port $APP_PORT)"
