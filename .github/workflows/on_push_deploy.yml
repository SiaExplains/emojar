name: Build & Deploy Emojar (no-standalone)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: emojar-frontend
      APP_DIR: /var/www/emojar
      NODE_VERSION: 20
      APP_PORT: "3006"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Bundle the source (no node_modules / .next)
      - name: Package source bundle
        run: |
          tar -czf emojar-src.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next' \
            --exclude='.vscode' \
            --exclude='.idea' \
            .

      - name: Upload source to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          source: "emojar-src.tar.gz"
          target: "/tmp"

      - name: Build on EC2 & start with PM2 (next start)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            set -euo pipefail

            # Make Node & PM2 available for non-interactive shell (NVM install)
            export PATH=$PATH:/home/ubuntu/.nvm/versions/node/v18.16.0/bin

            APP_NAME="${APP_NAME:-emojar-frontend}"
            APP_DIR="${APP_DIR:-/var/www/emojar}"
            APP_PORT="${APP_PORT:-3006}"
            SRC_TAR="/tmp/emojar-src.tar.gz"

            # Load NVM and use Node 20 (build & runtime)
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install 20 >/dev/null
            nvm use 20

            # Prepare target & extract sources
            sudo mkdir -p "$APP_DIR"
            sudo chown -R "$USER:$USER" "$APP_DIR"
            rm -rf "$APP_DIR/current"
            mkdir -p "$APP_DIR/current"
            tar -xzf "$SRC_TAR" -C "$APP_DIR/current"

            cd "$APP_DIR/current"
            npm ci --omit=dev
            npm run build

            # PM2 entry (runs next start -p $PORT and ensures Node 20 via NVM)
            cat > start.sh <<'EOS'
            #!/usr/bin/env bash
            set -euo pipefail
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm use 20 >/dev/null
            cd "$(dirname "$0")"
            PORT=${PORT:-3006}
            npm run start -- -p "$PORT"
            EOS
            chmod +x start.sh

            # Start or restart
            export PORT="$APP_PORT"
            if pm2 jlist | grep -q "\"name\":\"$APP_NAME\""; then
              pm2 restart "$APP_NAME" --update-env --time
            else
              pm2 start "$APP_DIR/current/start.sh" --name "$APP_NAME" --time
            fi

            pm2 save
            echo "Deployed $APP_NAME with next start on port $APP_PORT"
